// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Coordinator {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  weddings     Wedding[]
  invitations  VendorInvitation[]
  
  @@map("coordinators")
}

model Wedding {
  id           String   @id @default(cuid())
  slug         String   @unique
  coupleName   String
  weddingDate  DateTime
  venue        String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  coordinatorId String
  coordinator   Coordinator @relation(fields: [coordinatorId], references: [id], onDelete: Cascade)
  
  vendors      WeddingVendor[]
  tips         Tip[]
  invitations  VendorInvitation[]
  
  @@map("weddings")
}

model Vendor {
  id                String        @id @default(cuid())
  name              String
  email             String?       @unique
  phone             String?
  role              VendorRole
  status            VendorStatus  @default(PENDING)
  
  // Payment Information
  stripeAccountId   String?
  venmoHandle       String?
  cashAppHandle     String?
  zelleContact      String?       // Phone number or email for Zelle
  preferredPayment  PaymentMethod @default(STRIPE)
  
  // Profile Management
  isProfileComplete Boolean       @default(false)
  bio               String?
  website           String?
  serviceArea       String?       // Geographic area they serve
  
  // Registration
  registrationToken String?       @unique
  invitedBy         String?       // Coordinator who invited them
  registeredAt      DateTime?
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  weddingVendors    WeddingVendor[]
  tips              Tip[]
  invitations       VendorInvitation[]
  
  @@map("vendors")
}

model WeddingVendor {
  id                String    @id @default(cuid())
  serviceHours      Float?    // Length of service in hours
  serviceRate       Float?    // Hourly or total rate
  customTipAmount   Float?    // Custom tip amount set by coordinator
  notes             String?
  createdAt         DateTime  @default(now())
  
  weddingId         String
  wedding           Wedding   @relation(fields: [weddingId], references: [id], onDelete: Cascade)
  
  vendorId          String
  vendor            Vendor    @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  tips              Tip[]
  
  @@unique([weddingId, vendorId])
  @@map("wedding_vendors")
}

model Tip {
  id                String        @id @default(cuid())
  amount            Float
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus @default(PENDING)
  stripePaymentId   String?
  venmoTransactionId String?
  cashAppTransactionId String?
  tipMessage        String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  weddingId         String
  wedding           Wedding       @relation(fields: [weddingId], references: [id], onDelete: Cascade)
  
  vendorId          String
  vendor            Vendor        @relation(fields: [vendorId], references: [id])
  
  weddingVendorId   String
  weddingVendor     WeddingVendor @relation(fields: [weddingVendorId], references: [id])
  
  @@map("tips")
}

model VendorInvitation {
  id            String   @id @default(cuid())
  token         String   @unique @default(cuid())
  email         String
  vendorName    String
  role          VendorRole
  message       String?
  
  // Wedding context
  weddingId     String
  wedding       Wedding  @relation(fields: [weddingId], references: [id], onDelete: Cascade)
  
  // Coordinator who sent invitation
  coordinatorId String
  coordinator   Coordinator @relation(fields: [coordinatorId], references: [id])
  
  // Vendor who accepted (optional)
  vendorId      String?
  vendor        Vendor?  @relation(fields: [vendorId], references: [id])
  
  // Status tracking
  status        InvitationStatus @default(SENT)
  sentAt        DateTime @default(now())
  acceptedAt    DateTime?
  expiresAt     DateTime // 7 days from creation
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("vendor_invitations")
}

enum InvitationStatus {
  SENT
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum VendorRole {
  OFFICIANT
  COORDINATOR
  SETUP_ATTENDANT
  PHOTOGRAPHER
}

enum VendorStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

enum PaymentMethod {
  STRIPE
  VENMO
  CASHAPP
  ZELLE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}
